// Mocks generated by Mockito 5.4.6 from annotations
// in ecom/test/features/products/domain/usecases/get_products_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ecom/features/products/domain/entities/category.dart' as _i5;
import 'package:ecom/features/products/domain/entities/product.dart' as _i2;
import 'package:ecom/features/products/domain/repositories/products_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProduct_0 extends _i1.SmartFake implements _i2.Product {
  _FakeProduct_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsRepository extends _i1.Mock
    implements _i3.ProductsRepository {
  MockProductsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Product>> getProducts({
    int? limit = 20,
    String? startAfter,
    String? orderBy = 'createdAt',
    bool? descending = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, [], {
              #limit: limit,
              #startAfter: startAfter,
              #orderBy: orderBy,
              #descending: descending,
            }),
            returnValue: _i4.Future<List<_i2.Product>>.value(<_i2.Product>[]),
          )
          as _i4.Future<List<_i2.Product>>);

  @override
  _i4.Future<_i2.Product> getProductById(String? productId) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [productId]),
            returnValue: _i4.Future<_i2.Product>.value(
              _FakeProduct_0(
                this,
                Invocation.method(#getProductById, [productId]),
              ),
            ),
          )
          as _i4.Future<_i2.Product>);

  @override
  _i4.Future<List<_i5.Category>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i4.Future<List<_i5.Category>>.value(<_i5.Category>[]),
          )
          as _i4.Future<List<_i5.Category>>);

  @override
  _i4.Future<_i2.Product> toggleFavorite({
    required String? productId,
    required bool? isFavorite,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, [], {
              #productId: productId,
              #isFavorite: isFavorite,
            }),
            returnValue: _i4.Future<_i2.Product>.value(
              _FakeProduct_0(
                this,
                Invocation.method(#toggleFavorite, [], {
                  #productId: productId,
                  #isFavorite: isFavorite,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Product>);

  @override
  _i4.Future<List<_i2.Product>> getFavoriteProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteProducts, []),
            returnValue: _i4.Future<List<_i2.Product>>.value(<_i2.Product>[]),
          )
          as _i4.Future<List<_i2.Product>>);
}
